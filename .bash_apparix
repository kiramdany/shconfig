#  BASH-style functions
#
#  Name this file for example .bash_apparix in your $HOME directory
#  and put the line 'source $HOME/.bash_apparix' (without quotes)
#  in the file $HOME/.bashrc.

# list directories with trailing 
alias ls='ls -p'

function to () {
  true
  if test "$1"; then
    # Take everything before the first /
    local bookmark=${1%%/*}
    # Take everything after the trailing /
    local initialPath=${1#*/}
    # Hacky check to see if bookmark doesn't have a trailing slash
    if [ "$bookmark" != "$initialPath" ]; then
      shift
      # Add the first space if the path contains spaces. More than one space is not supported
      local additionalPath="${*+ ${*}}"
      local path=$initialPath$additionalPath
    fi
    echo path:
    echo $path
    local loc="$(apparix $bookmark)/$path"
    echo bookmark:
    echo $bookmark
    echo initialPath:
    echo $initialPath
    echo additionalPath:
    echo $additionalPath
    echo bookmark expansion:
    echo $(apparix $bookmark)
    echo loc:
    echo $loc
  else
    local loc=$HOME
  fi
  if [[ $? == 0 ]]; then
    cd "$loc"
  fi
}

function bm () {
  if test "$2"; then
    apparix --add-mark "$1" "$2";
  elif test "$1"; then
    apparix --add-mark "$1";
  else
    apparix --add-mark;
  fi
}

# function to generate list of completions from .apparixrc
function _apparix_aliases ()
{ cur=$2
  dir=$3
  COMPREPLY=()
  nullglobsa=$(shopt -p nullglob)
  shopt -s nullglob
  if let $(($COMP_CWORD == 1)); then
    # now cur=<apparix mark> (completing on this) and dir='to'
    # Below will complete on subdirectories of current directory. swap if so desired.
    # COMPREPLY=( $( (cat $HOME/.apparix{rc,expand} | grep "\<j," | cut -f2 -d, ; ls -1p | grep '/$' | tr -d /) | grep "\<$cur.*" ) )
    # Below will not complete on subdirectories of current directory. swap if so desired.
    COMPREPLY=( $( cat $HOME/.apparix{rc,expand} | grep "j,.*$cur.*," | cut -f2 -d, ) )
  else
    # now dir=<apparix mark> and cur=<subdirectory-of-mark> (completing on this)
    # or cur=<fileordir> (when bound for example to ae)
    # dir=`apparix --try-current-last -favour rOl $dir 2>/dev/null` || return 0
#     eval_compreply="COMPREPLY=( $(
#       cd "$dir"
#       \ls -d $cur* | while read r
#       do
#         [[ $1 == 'ae' || $1 == 'als' || -d "$r" ]] &&
#         [[ $r == *$cur* ]] &&
#           echo \"${r// /\\ }\/\"
#       done
#     ) )"
#   eval $eval_compreply
	## My new completion code
	cd "$(apparix $dir)" # Ideally this would be done in a subshell however for some reason OSX launches subshells as login shells as well so there would be additional text from when the subshell logs out
	# This doesn't exactly work as compgen doesn't auto escape output, so files and directories with spaces in the name don't display correctly
	COMPREPLY=($(compgen -f $cur))
	cd - > /dev/null
	## end of my completion code
  fi
  $nullglobsa
  return 0
}

alias ap='apparix'


# command to register the above to expand when the 'to' command's args are
# being expanded
complete -o nospace -F _apparix_aliases to
complete -o nospace -F _apparix_aliases apparix
complete -o nospace -F _apparix_aliases ap

export APPARIXLOG=$HOME/.apparixlog
